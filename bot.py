import logging
import os
import glob
import subprocess
from datetime import datetime
import time
import threading
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

MENU_BUTTONS = [
    ["üìä –°—Ç–∞—Ç—É—Å WireGuard", "üë• –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"],
    ["üóë –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"]
]

class WireGuardBot:
    def __init__(self, bot_token, chat_id):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.delete_client_mode = False
        self.application = Application.builder().token(self.bot_token).build()
        threading.Thread(target=self.monitoring_loop, args=(self.application.bot,), daemon=True).start()

    def get_wg_configs(self):
        try:
            result = subprocess.run(["wg", "show"], capture_output=True, text=True)
            output = result.stdout
            configs = []
            current_peer = None
            for line in output.split('\n'):
                if line.startswith('peer:'):
                    if current_peer:
                        configs.append(current_peer)
                    current_peer = {'peer': line.split(':')[1].strip()}
                elif current_peer and line.strip():
                    if ':' in line:
                        key, value = line.split(':', 1)
                        current_peer[key.strip()] = value.strip()
            if current_peer:
                configs.append(current_peer)
            return configs
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ wg: {e}")
            return []

    def get_wg_interface_status(self):
        try:
            result = subprocess.run(["wg", "show"], capture_output=True, text=True)
            return result.stdout
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ wg: {e}")
            return None

    def read_file(self, path):
        try:
            with open(path, 'r') as f:
                return f.readlines()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {path}: {e}")
            return None

    def restart_wireguard(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç WireGuard –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            result = subprocess.run(["wg-quick", "down", "wg0"], capture_output=True, text=True)
            if result.returncode != 0:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ wg0: {result.stderr}")
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            result = subprocess.run(["wg-quick", "up", "wg0"], capture_output=True, text=True)
            if result.returncode != 0:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ wg0: {result.stderr}")
                return False
            
            logger.info("WireGuard –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ WireGuard: {e}")
            return False

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if str(update.effective_chat.id) != str(self.chat_id):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        reply_markup = ReplyKeyboardMarkup(MENU_BUTTONS, resize_keyboard=True)
        await update.message.reply_text(
            "üîê WireGuard Manager Bot (–õ–æ–∫–∞–ª—å–Ω—ã–π)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def menu_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if str(update.effective_chat.id) != str(self.chat_id):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        text = update.message.text
        if self.delete_client_mode:
            await self.handle_delete_client_name(update, context)
            return
        if text == "üìä –°—Ç–∞—Ç—É—Å WireGuard":
            await self.show_status_menu(update, context)
        elif text == "üë• –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤":
            await self.show_clients_menu(update, context)
        elif text == "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞":
            self.delete_client_mode = True
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ .conf), –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

    async def show_status_menu(self, update, context):
        try:
            status = self.get_wg_interface_status()
            if status:
                await update.message.reply_text(
                    f"üìä –°—Ç–∞—Ç—É—Å WireGuard:\n\n<pre>{status}</pre>",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å WireGuard")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def show_clients_menu(self, update, context):
        try:
            configs = self.get_wg_configs()
            if configs:
                message = "üë• <b>–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ WireGuard:</b>\n\n"
                for i, config in enumerate(configs, 1):
                    peer = config.get('peer', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    latest_handshake = config.get('latest handshake', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                    transfer = config.get('transfer', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                    message += f"<b>{i}. Peer:</b> <code>{peer[:20]}...</code>\n"
                    message += f"   üì° –ü–æ—Å–ª–µ–¥–Ω–∏–π handshake: {latest_handshake}\n"
                    message += f"   üìä –¢—Ä–∞—Ñ–∏–∫: {transfer}\n\n"
                await update.message.reply_text(message, parse_mode=ParseMode.HTML)
            else:
                await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def handle_delete_client_name(self, update, context):
        name = update.message.text.strip()
        self.delete_client_mode = False
        if not name:
            await update.message.reply_text("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return
        # –£–¥–∞–ª—è–µ–º .conf —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
        conf_path = f"/etc/wireguard/clients/{name}.conf"
        if os.path.exists(conf_path):
            os.remove(conf_path)
        else:
            await update.message.reply_text(f"–ö–ª–∏–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º {name} –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª—ë–Ω).")
            return
        # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ –∏–∑ wg0.conf
        await self.delete_client_block_from_wg0(update, context, name)

    async def delete_client_block_from_wg0(self, update, context, name):
        lines = self.read_file('/etc/wireguard/wg0.conf')
        if not lines:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å wg0.conf")
            return
        new_lines = []
        skip = 0
        found = False
        for i, line in enumerate(lines):
            if skip > 0:
                skip -= 1
                continue
            if line.strip().lower().startswith(f"# client: {name.lower()}"):
                found = True
                skip = 3
                continue
            new_lines.append(line.rstrip('\n'))
        if not found:
            await update.message.reply_text(f"–ë–ª–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏–º–µ–Ω–µ–º {name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ wg0.conf.")
            return
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º wg0.conf
        with open('/etc/wireguard/wg0.conf', 'w') as f:
            f.write('\n'.join(new_lines) + '\n')
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º WireGuard –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ WireGuard –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        if self.restart_wireguard():
            await update.message.reply_text(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏ WireGuard –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {name} —É–¥–∞–ª—ë–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ WireGuard")

    def find_client_comment_in_wg0(self, peer_pubkey):
        lines = self.read_file('/etc/wireguard/wg0.conf')
        if not lines:
            return None
        try:
            for i, line in enumerate(lines):
                line_stripped = line.strip()
                if line_stripped.startswith('PublicKey'):
                    key_value = line_stripped.split('=', 1)[-1].strip()
                    if key_value == peer_pubkey:
                        for j in range(i-1, -1, -1):
                            comment = lines[j].strip()
                            if comment.lstrip().startswith('#'):
                                comment_text = comment.lstrip('#').strip()
                                if comment_text.lower().startswith('client:'):
                                    comment_text = comment_text[7:].strip()
                                return comment_text
                            if comment == '':
                                continue
        except Exception:
            pass
        return None

    async def send_new_client_notification(self, context, config, bot=None):
        message = "üÜï <b>–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç WireGuard!</b>\n\n"
        client_comment = None
        if config.get('peer'):
            client_comment = self.find_client_comment_in_wg0(config['peer'])
        if client_comment:
            message += f"üìù <b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {client_comment}\n"
        if config.get('peer'):
            message += f"üîë <b>–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:</b> <code>{config['peer'][:20]}...</code>\n"
        if config.get('client_name'):
            message += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {config['client_name']}\n"
        if config.get('public_key') and not config.get('peer'):
            message += f"üîë <b>–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:</b> <code>{config['public_key'][:20]}...</code>\n"
        if config.get('allowed_ips'):
            message += f"üåê <b>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ IP:</b> {config['allowed_ips']}\n"
        if config.get('created_time'):
            message += f"üïê <b>–°–æ–∑–¥–∞–Ω:</b> {config['created_time']}\n"
        tg_bot = None
        if context and hasattr(context, 'bot'):
            tg_bot = context.bot
        elif bot:
            tg_bot = bot
        if tg_bot:
            await tg_bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )

    def get_current_peers(self):
        configs = self.get_wg_configs()
        return {c.get('peer') for c in configs if c.get('peer')}

    def get_peer_info(self, peer_pubkey):
        configs = self.get_wg_configs()
        for c in configs:
            if c.get('peer') == peer_pubkey:
                return c
        return None

    def get_wg_config_files(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        try:
            result = subprocess.run(["ls", "/etc/wireguard/clients/"], capture_output=True, text=True)
            if result.returncode == 0:
                files = [f.strip() for f in result.stdout.split('\n') if f.strip()]
                return files
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            return []

    def parse_config_file_info(self, config_path):
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            lines = self.read_file(config_path)
            if not lines:
                return None
                
            config_info = {
                'filename': os.path.basename(config_path),
                'path': config_path,
                'client_name': None,
                'public_key': None,
                'allowed_ips': None,
                'endpoint': None
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            try:
                result = subprocess.run(["stat", "-c", "%y", config_path], capture_output=True, text=True)
                if result.returncode == 0:
                    config_info['created_time'] = result.stdout.strip()
            except:
                pass
            
            # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            for line in lines:
                line = line.strip()
                if line.startswith('#') and 'name' in line.lower():
                    config_info['client_name'] = line.split('#')[1].strip()
                elif line.startswith('PublicKey ='):
                    config_info['public_key'] = line.split('=')[1].strip()
                elif line.startswith('AllowedIPs ='):
                    config_info['allowed_ips'] = line.split('=')[1].strip()
                elif line.startswith('Endpoint ='):
                    config_info['endpoint'] = line.split('=')[1].strip()
                    
            return config_info
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ {config_path}: {e}")
            return None

    def monitoring_loop(self, bot):
        prev_peers = set()
        prev_config_files = set()
        while True:
            try:
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö peer'–æ–≤
                current_peers = self.get_current_peers()
                new_peers = current_peers - prev_peers
                if new_peers:
                    for peer in new_peers:
                        config = self.get_peer_info(peer)
                        if config:
                            import asyncio
                            asyncio.run_coroutine_threadsafe(
                                self.send_new_client_notification(None, config, bot=bot),
                                self.application.loop
                            )
                    prev_peers = current_peers
                else:
                    prev_peers = current_peers
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
                current_config_files = set(self.get_wg_config_files())
                new_config_files = current_config_files - prev_config_files
                if new_config_files:
                    for config_file in new_config_files:
                        if config_file.endswith('.conf'):
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ
                            config_info = self.parse_config_file_info(f"/etc/wireguard/clients/{config_file}")
                            if config_info:
                                import asyncio
                                asyncio.run_coroutine_threadsafe(
                                    self.send_new_client_notification(None, config_info, bot=bot),
                                    self.application.loop
                                )
                    prev_config_files = current_config_files
                else:
                    prev_config_files = current_config_files
                
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(60)

    def run(self):
        application = self.application
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), self.menu_handler))
        application.add_handler(CallbackQueryHandler(self.menu_handler))
        print("ü§ñ WireGuard Bot (–õ–æ–∫–∞–ª—å–Ω—ã–π) –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    from config import load_config
    config = load_config()
    if not config:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ api_token.txt")
        exit(1)
    
    bot_token = config["BOT_TOKEN"]
    chat_id = config["CHAT_ID"]
    bot = WireGuardBot(bot_token, chat_id)
    bot.run() 