import logging
import os
import glob
import subprocess
from datetime import datetime
import time
import threading
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, JobQueue
from telegram.constants import ParseMode
import paramiko
import tempfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

MENU_BUTTONS = [
    ["üìä –°—Ç–∞—Ç—É—Å WireGuard", "üë• –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"],
    ["üóë –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"]
]

class WireGuardBot:
    def __init__(self, bot_token, chat_id, ssh_host, ssh_port, ssh_username, ssh_password):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.delete_client_mode = False
        self.application = Application.builder().token(self.bot_token).build()
        self.ssh_host = ssh_host
        self.ssh_port = ssh_port
        self.ssh_username = ssh_username
        self.ssh_password = ssh_password
        self.ssh_client = None
        self.debug_log_path = '/tmp/wg_bot_debug.log'
        threading.Thread(target=self.monitoring_loop, args=(self.application.bot,), daemon=True).start()

    def debug_log(self, msg):
        print(f"{datetime.now()} | {msg}")

    def ssh_connect(self):
        if self.ssh_client is not None:
            return self.ssh_client
        try:
            client = paramiko.SSHClient()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(
                hostname=self.ssh_host,
                port=self.ssh_port,
                username=self.ssh_username,
                password=self.ssh_password,
                timeout=10
            )
            self.ssh_client = client
            return client
        except Exception as e:
            print(f"[DEBUG] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SSH: {e}")
            self.ssh_client = None
            return None

    def ssh_exec(self, command):
        client = self.ssh_connect()
        if not client:
            return None
        try:
            stdin, stdout, stderr = client.exec_command(command)
            output = stdout.read().decode('utf-8')
            error = stderr.read().decode('utf-8')
            if error:
                print(f"[DEBUG] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø–æ SSH: {error}")
            return output
        except Exception as e:
            print(f"[DEBUG] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø–æ SSH: {e}")
            return None

    def get_wg_configs(self):
        output = self.ssh_exec("wg show")
        print(f"[DEBUG] wg show output: {output}")
        if not output:
            return []
        configs = []
        current_peer = None
        for line in output.split('\n'):
            if line.startswith('peer:'):
                if current_peer:
                    configs.append(current_peer)
                current_peer = {'peer': line.split(':')[1].strip()}
            elif current_peer and line.strip():
                if ':' in line:
                    key, value = line.split(':', 1)
                    current_peer[key.strip()] = value.strip()
        if current_peer:
            configs.append(current_peer)
        return configs

    def get_wg_interface_status(self):
        try:
            result = subprocess.run(["wg", "show"], capture_output=True, text=True)
            return result.stdout
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ wg: {e}")
            return None

    def read_file(self, path):
        output = self.ssh_exec(f"cat {path}")
        if output is None:
            return None
        return output.splitlines(keepends=True)

    def restart_wireguard(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç WireGuard –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            result = subprocess.run(["wg-quick", "down", "wg0"], capture_output=True, text=True)
            if result.returncode != 0:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ wg0: {result.stderr}")
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            result = subprocess.run(["wg-quick", "up", "wg0"], capture_output=True, text=True)
            if result.returncode != 0:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ wg0: {result.stderr}")
                return False
            
            logger.info("WireGuard –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ WireGuard: {e}")
            return False

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if str(update.effective_chat.id) != str(self.chat_id):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        reply_markup = ReplyKeyboardMarkup(MENU_BUTTONS, resize_keyboard=True)
        await update.message.reply_text(
            "üîê WireGuard Manager Bot\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def menu_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if str(update.effective_chat.id) != str(self.chat_id):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        text = update.message.text
        if self.delete_client_mode:
            await self.handle_delete_client_name(update, context)
            return
        if text == "üìä –°—Ç–∞—Ç—É—Å WireGuard":
            await self.show_status_menu(update, context)
        elif text == "üë• –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤":
            await self.show_clients_menu(update, context)
        elif text == "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞":
            self.delete_client_mode = True
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ .conf), –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

    async def show_status_menu(self, update, context):
        try:
            status = self.ssh_exec("wg show")
            if status:
                await update.message.reply_text(
                    f"üìä –°—Ç–∞—Ç—É—Å WireGuard:\n\n<pre>{status}</pre>",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å WireGuard")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def show_clients_menu(self, update, context):
        try:
            configs = self.get_wg_configs()
            if configs:
                wg0_lines = self.read_file('/etc/wireguard/wg0.conf')
                message = "üë• <b>–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ WireGuard:</b>\n\n"
                for i, config in enumerate(configs, 1):
                    peer = config.get('peer', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    latest_handshake = config.get('latest handshake', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                    transfer = config.get('transfer', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                    # –ü–æ–∏—Å–∫ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ø—É–±–ª–∏—á–Ω–æ–º—É –∫–ª—é—á—É (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ find_client_name_by_pubkey)
                    client_name = None
                    if peer and wg0_lines:
                        for idx, line in enumerate(wg0_lines):
                            if line.strip().startswith('PublicKey') and peer in line:
                                for j in range(idx-1, idx-3, -1):
                                    if j >= 0 and wg0_lines[j].strip().lower().startswith('# client:'):
                                        client_name = wg0_lines[j].strip()[9:].strip()
                                        # print(f"[DEBUG] –ù–∞–π–¥–µ–Ω client_name –¥–ª—è peer {peer}: {client_name}")
                                        break
                                break
                    message += f"<b>{i}. Peer:</b> <code>{peer[:20]}...</code>"
                    if client_name:
                        message += f"\n   üìù –ò–º—è –∫–æ–Ω—Ñ–∏–≥–∞: <b>{client_name}</b>"
                    message += f"\n   üì° –ü–æ—Å–ª–µ–¥–Ω–∏–π handshake: {latest_handshake}"
                    message += f"\n   üìä –¢—Ä–∞—Ñ–∏–∫: {transfer}\n\n"
                await update.message.reply_text(message, parse_mode=ParseMode.HTML)
            else:
                await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def handle_delete_client_name(self, update, context):
        name = update.message.text.strip()
        self.delete_client_mode = False
        if not name:
            await update.message.reply_text("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return
        # –£–¥–∞–ª—è–µ–º .conf —Ñ–∞–π–ª –ø–æ SSH
        conf_path = f"/etc/wireguard/clients/{name}.conf"
        rm_result = self.ssh_exec(f"rm -f {conf_path}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ñ–∞–π–ª
        ls_result = self.ssh_exec(f"ls {conf_path}")
        if ls_result:
            await update.message.reply_text(f"–ö–ª–∏–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º {name} –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª—ë–Ω).")
            return
        # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ –∏–∑ wg0.conf –ø–æ SSH
        await self.delete_client_block_from_wg0(update, context, name)

    async def delete_client_block_from_wg0(self, update, context, name):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∫–ª–∏–µ–Ω—Ç –≤ wg0.conf
            lines = self.read_file('/etc/wireguard/wg0.conf')
            found = False
            if lines:
                for line in lines:
                    if line.strip().lower() == f"# client: {name.lower()}":
                        found = True
                        break
            if not found:
                await update.message.reply_text(f"–ö–ª–∏–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º {name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ wg0.conf.")
                return
            # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ awk –ø–æ SSH (–≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç)
            awk_cmd = (
                f"awk 'BEGIN {{ del=0 }} /^# *[Cc]lient: *{name}$/ {{ del=1; next }} /^# *[Cc]lient:/ {{ if (del) {{ del=0 }} }} /^# *[Cc]lient:/ && del==0 {{ print; next }} !del' /etc/wireguard/wg0.conf > /etc/wireguard/wg0.conf.tmp && mv /etc/wireguard/wg0.conf.tmp /etc/wireguard/wg0.conf"
            )
            self.ssh_exec(awk_cmd)
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º WireGuard –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ SSH
            await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ WireGuard –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            restart_result = self.ssh_exec("wg-quick down wg0 && wg-quick up wg0")
            if restart_result is not None:
                await update.message.reply_text(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏ WireGuard –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            else:
                await update.message.reply_text(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {name} —É–¥–∞–ª—ë–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ WireGuard")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

    def find_client_comment_in_wg0(self, peer_pubkey):
        lines = self.read_file('/etc/wireguard/wg0.conf')
        if not lines:
            return None
        try:
            for i, line in enumerate(lines):
                line_stripped = line.strip()
                if line_stripped.startswith('PublicKey'):
                    key_value = line_stripped.split('=', 1)[-1].strip()
                    if key_value == peer_pubkey:
                        for j in range(i-1, -1, -1):
                            comment = lines[j].strip()
                            if comment.lstrip().startswith('#'):
                                comment_text = comment.lstrip('#').strip()
                                if comment_text.lower().startswith('client:'):
                                    comment_text = comment_text[7:].strip()
                                return comment_text
                            if comment == '':
                                continue
        except Exception:
            pass
        return None

    def find_client_name_by_pubkey(self, pubkey):
        """–ò—â–µ—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ø—É–±–ª–∏—á–Ω–æ–º—É –∫–ª—é—á—É –≤ wg0.conf (# Client: ... –∑–∞ 2 —Å—Ç—Ä–æ–∫–∏ –≤—ã—à–µ PublicKey)"""
        lines = self.read_file('/etc/wireguard/wg0.conf')
        if not lines:
            return None
        for i, line in enumerate(lines):
            if line.strip().startswith('PublicKey') and pubkey in line:
                # –ò—â–µ–º # Client: ... –º–∞–∫—Å–∏–º—É–º –∑–∞ 2 —Å—Ç—Ä–æ–∫–∏ –≤—ã—à–µ
                for j in range(i-1, i-3, -1):
                    if j >= 0 and lines[j].strip().lower().startswith('# client:'):
                        return lines[j].strip()[9:].strip()  # –û–±—Ä–µ–∑–∞–µ–º '# Client:'
        return None

    def get_pubkey_to_name_map(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å pubkey -> client_name –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ wg0.conf –ø–æ SSH"""
        lines = self.read_file('/etc/wireguard/wg0.conf')
        pubkey_to_name = {}
        if not lines:
            return pubkey_to_name
        current_name = None
        for line in lines:
            l = line.strip()
            if l.lower().startswith('# client:'):
                current_name = l[9:].strip()
            elif l.startswith('PublicKey'):
                pubkey = l.split('=', 1)[-1].strip()
                if current_name:
                    pubkey_to_name[pubkey] = current_name
                current_name = None
            elif l.startswith('[Peer]'):
                current_name = None
        return pubkey_to_name

    async def send_new_client_notification(self, context, config, bot=None):
        print(f"[DEBUG] –í—ã–∑–≤–∞–Ω–∞ send_new_client_notification —Å config: {config}")
        pubkey = config.get('peer')
        client_name = self.find_client_name_by_pubkey(pubkey) if pubkey else None
        message = "üÜï <b>–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç WireGuard!</b>\n\n"
        if client_name:
            message += f"üìù <b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {client_name}\n"
        if pubkey:
            message += f"üîë <b>–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:</b> <code>{pubkey[:20]}...</code>\n"
        if config.get('client_name'):
            message += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {config['client_name']}\n"
        if config.get('public_key') and not config.get('peer'):
            message += f"üîë <b>–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:</b> <code>{config['public_key'][:20]}...</code>\n"
        if config.get('allowed_ips'):
            message += f"üåê <b>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ IP:</b> {config['allowed_ips']}\n"
        if config.get('created_time'):
            message += f"üïê <b>–°–æ–∑–¥–∞–Ω:</b> {config['created_time']}\n"
        tg_bot = None
        if context and hasattr(context, 'bot'):
            tg_bot = context.bot
        elif bot:
            tg_bot = bot
        # print(f"[DEBUG] tg_bot: {tg_bot}")
        if tg_bot:
            try:
                await tg_bot.send_message(
                    chat_id=self.chat_id,
                    text=message,
                    parse_mode=ParseMode.HTML
                )
                # print(f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
            except Exception as e:
                # print(f"[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                pass
        else:
            # print("[DEBUG] tg_bot –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            pass

    def get_current_peers(self):
        configs = self.get_wg_configs()
        return {c.get('peer') for c in configs if c.get('peer')}

    def get_peer_info(self, peer_pubkey):
        configs = self.get_wg_configs()
        for c in configs:
            if c.get('peer') == peer_pubkey:
                return c
        return None

    def monitoring_loop(self, bot):
        import asyncio
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        prev_peers = set()
        while True:
            try:
                current_peers = self.get_current_peers()
                new_peers = current_peers - prev_peers
                # self.debug_log(f"monitoring_loop: current_peers={current_peers}, prev_peers={prev_peers}, new_peers={new_peers}")
                if new_peers:
                    for peer in new_peers:
                        config = self.get_peer_info(peer)
                        if config:
                            loop.run_until_complete(self.send_new_client_notification(None, config, bot=bot))
                    prev_peers = current_peers
                else:
                    prev_peers = current_peers
                time.sleep(60)
            except Exception as e:
                # self.debug_log(f"–û—à–∏–±–∫–∞ –≤ monitoring_loop: {e}")
                time.sleep(60)

    def run(self):
        application = self.application
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), self.menu_handler))
        application.add_handler(CallbackQueryHandler(self.menu_handler))
        print("ü§ñ WireGuard Bot –∑–∞–ø—É—â–µ–Ω...")
        # self.debug_log("WireGuard Bot –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    # –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ chat_id –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    # –ü—Ä–∏–º–µ—Ä:
    # bot_token = os.environ["BOT_TOKEN"]
    # chat_id = os.environ["CHAT_ID"]
    # –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑ —Ñ–∞–π–ª–∞, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    from config import load_config
    config = load_config()
    bot_token = config["BOT_TOKEN"]
    chat_id = config["CHAT_ID"]
    ssh_host = config["SSH_HOST"]
    ssh_port = config["SSH_PORT"]
    ssh_username = config["SSH_USERNAME"]
    ssh_password = config["SSH_PASSWORD"]
    bot = WireGuardBot(bot_token, chat_id, ssh_host, ssh_port, ssh_username, ssh_password)
    bot.run() 